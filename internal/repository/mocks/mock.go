// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "Tasks_Users_Vk_test/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// GetBalance mocks base method.
func (m *MockUser) GetBalance(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUserMockRecorder) GetBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUser)(nil).GetBalance), userID)
}

// GetUserById mocks base method.
func (m *MockUser) GetUserById(id int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUser)(nil).GetUserById), id)
}

// UpdateBalance mocks base method.
func (m *MockUser) UpdateBalance(userID, questCost int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", userID, questCost)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockUserMockRecorder) UpdateBalance(userID, questCost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockUser)(nil).UpdateBalance), userID, questCost)
}

// MockQuest is a mock of Quest interface.
type MockQuest struct {
	ctrl     *gomock.Controller
	recorder *MockQuestMockRecorder
}

// MockQuestMockRecorder is the mock recorder for MockQuest.
type MockQuestMockRecorder struct {
	mock *MockQuest
}

// NewMockQuest creates a new mock instance.
func NewMockQuest(ctrl *gomock.Controller) *MockQuest {
	mock := &MockQuest{ctrl: ctrl}
	mock.recorder = &MockQuestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuest) EXPECT() *MockQuestMockRecorder {
	return m.recorder
}

// CreateQuest mocks base method.
func (m *MockQuest) CreateQuest(quest domain.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuest", quest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuest indicates an expected call of CreateQuest.
func (mr *MockQuestMockRecorder) CreateQuest(quest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuest", reflect.TypeOf((*MockQuest)(nil).CreateQuest), quest)
}

// GetCost mocks base method.
func (m *MockQuest) GetCost(questID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCost", questID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCost indicates an expected call of GetCost.
func (mr *MockQuestMockRecorder) GetCost(questID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCost", reflect.TypeOf((*MockQuest)(nil).GetCost), questID)
}

// GetQuestById mocks base method.
func (m *MockQuest) GetQuestById(id int) (domain.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestById", id)
	ret0, _ := ret[0].(domain.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestById indicates an expected call of GetQuestById.
func (mr *MockQuestMockRecorder) GetQuestById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestById", reflect.TypeOf((*MockQuest)(nil).GetQuestById), id)
}

// GetStages mocks base method.
func (m *MockQuest) GetStages(questID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStages", questID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStages indicates an expected call of GetStages.
func (mr *MockQuestMockRecorder) GetStages(questID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStages", reflect.TypeOf((*MockQuest)(nil).GetStages), questID)
}

// MockCompletedQuests is a mock of CompletedQuests interface.
type MockCompletedQuests struct {
	ctrl     *gomock.Controller
	recorder *MockCompletedQuestsMockRecorder
}

// MockCompletedQuestsMockRecorder is the mock recorder for MockCompletedQuests.
type MockCompletedQuestsMockRecorder struct {
	mock *MockCompletedQuests
}

// NewMockCompletedQuests creates a new mock instance.
func NewMockCompletedQuests(ctrl *gomock.Controller) *MockCompletedQuests {
	mock := &MockCompletedQuests{ctrl: ctrl}
	mock.recorder = &MockCompletedQuestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompletedQuests) EXPECT() *MockCompletedQuestsMockRecorder {
	return m.recorder
}

// AddCompletedTask mocks base method.
func (m *MockCompletedQuests) AddCompletedTask(userID, questID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompletedTask", userID, questID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCompletedTask indicates an expected call of AddCompletedTask.
func (mr *MockCompletedQuestsMockRecorder) AddCompletedTask(userID, questID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompletedTask", reflect.TypeOf((*MockCompletedQuests)(nil).AddCompletedTask), userID, questID)
}

// GetCompletedQuestsByUserId mocks base method.
func (m *MockCompletedQuests) GetCompletedQuestsByUserId(userID int) ([]domain.HistoryQuests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedQuestsByUserId", userID)
	ret0, _ := ret[0].([]domain.HistoryQuests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedQuestsByUserId indicates an expected call of GetCompletedQuestsByUserId.
func (mr *MockCompletedQuestsMockRecorder) GetCompletedQuestsByUserId(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedQuestsByUserId", reflect.TypeOf((*MockCompletedQuests)(nil).GetCompletedQuestsByUserId), userID)
}

// HaveStages mocks base method.
func (m *MockCompletedQuests) HaveStages(userID, questsID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HaveStages", userID, questsID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HaveStages indicates an expected call of HaveStages.
func (mr *MockCompletedQuestsMockRecorder) HaveStages(userID, questsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaveStages", reflect.TypeOf((*MockCompletedQuests)(nil).HaveStages), userID, questsID)
}

// UpdateStages mocks base method.
func (m *MockCompletedQuests) UpdateStages(userID, questID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStages", userID, questID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStages indicates an expected call of UpdateStages.
func (mr *MockCompletedQuestsMockRecorder) UpdateStages(userID, questID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStages", reflect.TypeOf((*MockCompletedQuests)(nil).UpdateStages), userID, questID)
}
