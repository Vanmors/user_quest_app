// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "Tasks_Users_Vk_test/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompletedQuests is a mock of CompletedQuests interface.
type MockCompletedQuests struct {
	ctrl     *gomock.Controller
	recorder *MockCompletedQuestsMockRecorder
}

// MockCompletedQuestsMockRecorder is the mock recorder for MockCompletedQuests.
type MockCompletedQuestsMockRecorder struct {
	mock *MockCompletedQuests
}

// NewMockCompletedQuests creates a new mock instance.
func NewMockCompletedQuests(ctrl *gomock.Controller) *MockCompletedQuests {
	mock := &MockCompletedQuests{ctrl: ctrl}
	mock.recorder = &MockCompletedQuestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompletedQuests) EXPECT() *MockCompletedQuestsMockRecorder {
	return m.recorder
}

// CompleteTask mocks base method.
func (m *MockCompletedQuests) CompleteTask(recordCompleted domain.RecordCompleted) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", recordCompleted)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockCompletedQuestsMockRecorder) CompleteTask(recordCompleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockCompletedQuests)(nil).CompleteTask), recordCompleted)
}
